Smart Display Project - 設計とセキュリティ改良提案
===================================================

このファイルは、スマートディスプレイプロジェクトの設計とセキュリティ面での改良点をまとめたものです。
各項目は Claude に直接投げられるプロンプト形式で記述されています。

【セキュリティ優先度：高】
========================

## 1. API キーとシークレット管理の強化
```
backend/src/index.ts の OpenWeatherMap API キーと Google OAuth 認証情報の管理を強化してください。
- 環境変数の検証とバリデーション機能を追加
- API キーが未設定の場合の適切なエラーハンドリング
- Vault や AWS Secrets Manager などのシークレット管理サービスとの統合を検討
- dev/staging/production 環境ごとの設定管理
```

## 2. 入力値検証とサニタイゼーションの実装
```
以下のエンドポイントに適切な入力値検証を追加してください：
- /api/weather の location パラメータ
- /api/weather/cities の q パラメータ
- Socket.io イベントの payload 検証
- ファイル名、パス等の検証を追加（../などのパストラバーサル攻撃対策）
- XSS 攻撃対策として HTML エスケープ機能を実装
```

## 3. HTTPS 強制とセキュリティヘッダー強化
```
backend/src/index.ts のセキュリティ設定を強化してください：
- HTTPS のみでの接続を強制する設定
- Helmet.js の設定を詳細に調整（CSP, HSTS, X-Frame-Options など）
- CORS 設定をより厳密に（origin の検証強化）
- Security.txt ファイルの追加
```

## 4. レート制限とDDoS対策
```
API エンドポイントにレート制限を実装してください：
- express-rate-limit または類似ライブラリを使用
- IP アドレス、API キー単位での制限
- Weather API への過度なリクエスト防止
- Socket.io 接続数制限の実装
```

## 5. フロントエンドのセキュリティ強化
```
frontend の以下のセキュリティ問題を修正してください：
- localStorage に保存される機密データの暗号化
- Vite 設定でのソースマップ無効化（本番環境）
- Content Security Policy の実装
- 外部 URL へのアクセス制限
- 入力フィールドでの XSS 対策強化
```

【設計・アーキテクチャ優先度：高】
================================

## 6. エラーハンドリングとロギングの統一
```
プロジェクト全体でエラーハンドリングとロギングを統一してください：
- Winston または Pino を使った構造化ログの実装
- エラー境界（Error Boundaries）の追加
- ユーザーフレンドリーなエラーメッセージ表示
- エラートラッキング（Sentry 等）の導入検討
- デバッグ用 console.log の削除と適切なロガーへの置き換え
```

## 7. データベース層の実装
```
現在のファイルベースのデータ保存を改善してください：
- SQLite/PostgreSQL などのデータベースの導入
- ユーザー設定、ウィジェット設定、認証トークンの永続化
- データマイグレーション機能の実装
- バックアップとリストア機能
- ORM（Prisma、TypeORM など）の導入検討
```

## 8. 設定管理システムの改善
```
アプリケーション設定管理を改善してください：
- 環境変数の型安全な管理（zod などでのバリデーション）
- 設定ファイルの階層化（base, development, production）
- 設定値の動的更新機能
- 設定画面での詳細な項目設定
- 設定のインポート/エクスポート機能
```

## 9. Component 設計の改善
```
React コンポーネントの設計を改善してください：
- WeatherWidget.tsx の巨大化を解消（責務分離）
- カスタムフック化可能な部分の抽出
- Props インターフェースの改善（optional vs required の明確化）
- コンポーネントの再利用性向上
- Compound Component パターンの適用検討
```

## 10. 状態管理の最適化
```
Zustand ストアの設計を改善してください：
- Store の分割（Feature-based）
- 永続化戦略の改善（部分的永続化）
- 状態の正規化
- 楽観的更新の実装
- Undo/Redo 機能の追加検討
```

【パフォーマンス・スケーラビリティ】
=================================

## 11. フロントエンドパフォーマンス最適化
```
React アプリケーションのパフォーマンスを最適化してください：
- React.memo、useMemo、useCallback の適切な使用
- コンポーネントの遅延読み込み（lazy loading）
- バンドルサイズの最適化（tree shaking、code splitting）
- 画像の最適化（WebP 対応、遅延読み込み）
- Service Worker の実装（オフライン対応）
```

## 12. API の最適化とキャッシュ戦略
```
API のパフォーマンスを改善してください：
- Redis を使ったキャッシュレイヤーの実装
- Weather API レスポンスのキャッシュ（適切な TTL 設定）
- GraphQL の導入検討（over-fetching の解消）
- API レスポンスの Gzip 圧縮
- CDN の活用検討
```

## 13. リアルタイム通信の改善
```
Socket.io の実装を改善してください：
- 接続の自動復旧機能
- メッセージの配信保証
- Room 機能を使った効率的な配信
- 接続数監視とメトリクス取得
- WebSocket フォールバック戦略
```

【開発体験・運用】
=================

## 14. テスト環境の整備
```
包括的なテスト環境を構築してください：
- Jest + React Testing Library でのユニットテスト
- Cypress または Playwright でのE2Eテスト
- API テスト（Supertest）
- コンポーネントのビジュアルリグレッションテスト
- カバレッジレポートの設定
```

## 15. CI/CD パイプラインの構築
```
自動化されたデプロイメントパイプラインを構築してください：
- GitHub Actions または GitLab CI の設定
- 自動テスト実行、ビルド、デプロイ
- セキュリティスキャン（npm audit、Snyk など）
- コード品質チェック（ESLint、Prettier、SonarQube）
- ブランチ保護とコードレビュー必須化
```

## 16. 監視とメトリクス
```
アプリケーションの監視体制を構築してください：
- ヘルスチェックエンドポイントの拡充
- Prometheus メトリクスの実装
- ログ集約システム（ELK Stack など）
- アラート機能（死活監視、エラー率監視）
- パフォーマンス監視（APM ツール）
```

## 17. ドキュメント整備
```
プロジェクトのドキュメントを整備してください：
- API ドキュメント（OpenAPI/Swagger）
- コンポーネントライブラリ（Storybook）
- アーキテクチャ図の作成
- セットアップ手順の詳細化
- トラブルシューティングガイド
- コントリビューションガイドライン
```

【機能追加・改善】
================

## 18. ユーザー管理機能
```
マルチユーザー対応を実装してください：
- ユーザー認証システム（JWT ベース）
- ユーザーごとのダッシュボード設定保存
- 共有ダッシュボード機能
- 権限管理（管理者、ユーザー）
- プロフィール管理機能
```

## 19. ウィジェット拡張性の向上
```
ウィジェットシステムを拡張してください：
- プラグイン形式でのウィジェット追加
- ウィジェット間のデータ連携
- カスタム CSS/JavaScript 対応
- ウィジェットのマーケットプレイス機能
- テンプレート機能
```

## 20. データエクスポート・インポート
```
設定とデータの移行機能を実装してください：
- 設定データのエクスポート/インポート（JSON 形式）
- 複数環境間での設定同期
- バックアップの自動化
- 他のダッシュボードツールからの移行支援
- データ形式のバージョニング
```

【実装優先順位ガイド】
====================

1. 【セキュリティ優先度：高】→ 即座に対応が必要
2. 【設計・アーキテクチャ優先度：高】→ プロジェクトの継続性に重要
3. 【パフォーマンス・スケーラビリティ】→ ユーザー体験向上
4. 【開発体験・運用】→ 長期保守性
5. 【機能追加・改善】→ 機能拡張

各項目は独立して実装可能ですが、設計系の改善を先に行うことで
後続の実装がスムーズになります。