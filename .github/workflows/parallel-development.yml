name: Parallel Development with Claude Code

on:
  workflow_dispatch:
    inputs:
      tasks:
        description: 'Development tasks to execute in parallel'
        required: true
        type: choice
        options:
          - 'weather-api'
          - 'socket-realtime'
          - 'responsive-design'
          - 'testing-setup'
          - 'all-tasks'
        default: 'all-tasks'
      branch:
        description: 'Branch to work on'
        required: true
        default: 'main'
        type: string

jobs:
  weather-api:
    if: ${{ github.event.inputs.tasks == 'weather-api' || github.event.inputs.tasks == 'all-tasks' }}
    runs-on: ubuntu-latest
    name: Weather API Integration
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Run Claude Code for Weather API
        uses: anthropics/claude-code-action@v1
        with:
          anthropic-api-key: ${{ secrets.ANTHROPIC_API_KEY }}
          task: |
            天気情報API統合を実装してください。以下の要件を満たしてください：
            1. OpenWeatherMap APIとの統合
            2. バックエンドで天気データを取得するエンドポイント作成
            3. フロントエンドでAPIを呼び出すサービス作成
            4. エラーハンドリングとリトライ機能
            5. 環境変数での設定管理
          target-files: |
            backend/src/
            frontend/src/
            shared/

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "feat: implement weather API integration"
          title: "Weather API Integration"
          body: |
            ## 天気情報API統合
            
            - OpenWeatherMap APIとの統合を実装
            - バックエンドAPIエンドポイント作成
            - フロントエンドサービス作成
            - エラーハンドリング実装
            
            🤖 Generated with Claude Code via GitHub Actions
          branch: feature/weather-api
          delete-branch: true

  socket-realtime:
    if: ${{ github.event.inputs.tasks == 'socket-realtime' || github.event.inputs.tasks == 'all-tasks' }}
    runs-on: ubuntu-latest
    name: Socket.io Real-time Communication
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Run Claude Code for Socket.io
        uses: anthropics/claude-code-action@v1
        with:
          anthropic-api-key: ${{ secrets.ANTHROPIC_API_KEY }}
          task: |
            Socket.ioによるリアルタイム通信を完全に実装してください：
            1. レイアウト変更の他端末への即座の同期
            2. ウィジェットデータの自動更新
            3. 接続状態の管理とエラーハンドリング
            4. 複数クライアント間でのデータ同期
            5. 接続切れ時の自動再接続機能
          target-files: |
            backend/src/
            frontend/src/stores/
            frontend/src/hooks/

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "feat: implement Socket.io real-time communication"
          title: "Socket.io Real-time Communication"
          body: |
            ## Socket.io リアルタイム通信
            
            - レイアウト変更の即座同期
            - ウィジェットデータの自動更新
            - 接続状態管理とエラーハンドリング
            - 複数クライアント間でのデータ同期
            
            🤖 Generated with Claude Code via GitHub Actions
          branch: feature/socket-realtime
          delete-branch: true

  responsive-design:
    if: ${{ github.event.inputs.tasks == 'responsive-design' || github.event.inputs.tasks == 'all-tasks' }}
    runs-on: ubuntu-latest
    name: Responsive Design Implementation
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: cd frontend && npm ci

      - name: Run Claude Code for Responsive Design
        uses: anthropics/claude-code-action@v1
        with:
          anthropic-api-key: ${{ secrets.ANTHROPIC_API_KEY }}
          task: |
            レスポンシブ対応を実装してください：
            1. タブレット横向き（1024x768以上）でのメイン表示
            2. 縦向きでも使用可能な設計
            3. 異なる画面サイズでのグリッド調整
            4. タッチ操作対応の改善
            5. メディアクエリを使った最適化
          target-files: |
            frontend/src/
            frontend/tailwind.config.js
            frontend/src/index.css

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "feat: implement responsive design"
          title: "Responsive Design Implementation"
          body: |
            ## レスポンシブ対応
            
            - タブレット横向けメイン表示対応
            - 縦向きでも使用可能な設計
            - 画面サイズに応じたグリッド調整
            - タッチ操作の改善
            
            🤖 Generated with Claude Code via GitHub Actions
          branch: feature/responsive-design
          delete-branch: true

  testing-setup:
    if: ${{ github.event.inputs.tasks == 'testing-setup' || github.event.inputs.tasks == 'all-tasks' }}
    runs-on: ubuntu-latest
    name: Testing Framework Setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Run Claude Code for Testing
        uses: anthropics/claude-code-action@v1
        with:
          anthropic-api-key: ${{ secrets.ANTHROPIC_API_KEY }}
          task: |
            テストフレームワークの設定と基本テストを実装してください：
            1. フロントエンド: Jest + React Testing Library
            2. バックエンド: Jest + Supertest
            3. E2Eテスト: Playwright
            4. 基本的なユニットテスト作成
            5. CI/CDでのテスト実行設定
          target-files: |
            backend/
            frontend/
            .github/workflows/

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "feat: setup testing framework"
          title: "Testing Framework Setup"
          body: |
            ## テストフレームワーク設定
            
            - Jest + React Testing Library (フロントエンド)
            - Jest + Supertest (バックエンド)
            - Playwright (E2Eテスト)
            - 基本的なユニットテスト作成
            
            🤖 Generated with Claude Code via GitHub Actions
          branch: feature/testing-setup
          delete-branch: true